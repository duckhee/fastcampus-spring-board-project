plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
}

group = 'kr.co.won'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// vault configuration 을 위한 확장 설정
ext {
    set('springCloudVersion', "2021.0.5")
}

dependencies {
    // swagger UI dependency add
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
//    implementation 'org.springdoc:springdoc-openai-data-re st:1.6.12'
    implementation 'org.springdoc:springdoc-openapi-javadoc:1.6.12'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // security 가 기본적으로 제공하는 로그인 페이지가 구현된 Filter 는 DefaultLoginPageGeneratingFilter 이다.
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    // 사용자 custom annotation config process
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // security thymeleaf
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    // querydsl setting spring boot management 가 querydsl 을 관리를 해주기 때문에 버전 정보를 입력을 하지 않아도 된다.
//    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    implementation "com.querydsl:querydsl-jpa"
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    /*dev setting */
    implementation 'org.springframework.boot:spring-boot-devtools'
    // database setting
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
//    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
//    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
    // querydsl JPAAnnotationProcessor 사용 지정
    // java.lang.NoClassDefFoundError(javax.annotation.Generated) 대응 코드
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    // java.lang.NoClassDefFoundError(javax.annotation.Entity) 대응 코드
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    // 여기까지 querydsl setting
    // OAuth2.0 client dependency add
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    // vault configuration implementation
    implementation('org.springframework.cloud:spring-cloud-starter-vault-config')
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'org.postgresql:postgresql'
    //    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    // swagger javdoc
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // vault configuration
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
tasks.named('test') {
    useJUnitPlatform()
}

// querydsl setting

//def generated : String = 'src/main/generated'
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

// Heroku setting
jar {
    manifest {
        attributes("Main-Class": "kr.co.won.SpringProjectBoardApplication")
    }
}